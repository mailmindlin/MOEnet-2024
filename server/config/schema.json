{
	"$defs": {
		"AprilTagFamily": {
			"enum": [
				"tag16h5",
				"tag25h9",
				"tag36h10",
				"tag36h11",
				"tagCircle21h7",
				"tagStandard41h12"
			],
			"title": "AprilTagFamily",
			"type": "string"
		},
		"AprilTagFieldInlineSai": {
			"description": "Inline AprilTag config (SAI format)",
			"properties": {
				"format": {
					"const": "sai",
					"title": "Format"
				},
				"field": {
					"allOf": [
						{
							"$ref": "#/$defs/FieldLayout"
						}
					],
					"description": "Field size"
				},
				"tags": {
					"description": "AprilTags (SAI format)",
					"items": {
						"$ref": "#/$defs/AprilTagSai"
					},
					"title": "Tags",
					"type": "array"
				}
			},
			"required": [
				"field",
				"tags"
			],
			"title": "AprilTagFieldInlineSai",
			"type": "object"
		},
		"AprilTagFieldInlineWpi": {
			"description": "Inline AprilTag config (WPI format)",
			"properties": {
				"format": {
					"const": "wpi",
					"title": "Format"
				},
				"field": {
					"allOf": [
						{
							"$ref": "#/$defs/FieldLayout"
						}
					],
					"description": "Field size"
				},
				"tags": {
					"description": "AprilTags (WPI format)",
					"items": {
						"$ref": "#/$defs/AprilTagWpi"
					},
					"title": "Tags",
					"type": "array"
				},
				"tagFamily": {
					"allOf": [
						{
							"$ref": "#/$defs/AprilTagFamily"
						}
					],
					"description": "AprilTag family"
				},
				"tagSize": {
					"description": "AprilTag side length, in meters",
					"title": "Tagsize",
					"type": "number"
				}
			},
			"required": [
				"field",
				"tags",
				"tagFamily",
				"tagSize"
			],
			"title": "AprilTagFieldInlineWpi",
			"type": "object"
		},
		"AprilTagFieldNamedWpilib": {
			"description": "Named AprilTag field",
			"enum": [
				"2022RapidReact",
				"2023ChargedUp",
				"2024Crescendo"
			],
			"title": "AprilTagFieldNamedWpilib",
			"type": "string"
		},
		"AprilTagFieldRefSai": {
			"description": "Reference to an AprilTag JSON file (in SpectacularAI format)",
			"properties": {
				"format": {
					"const": "sai",
					"title": "Format"
				},
				"path": {
					"description": "Path to AprilTag configuration",
					"format": "path",
					"title": "Path",
					"type": "string"
				},
				"field": {
					"$ref": "#/$defs/FieldLayout"
				}
			},
			"required": [
				"path",
				"field"
			],
			"title": "AprilTagFieldRefSai",
			"type": "object"
		},
		"AprilTagFieldRefWpi": {
			"description": "Reference to an AprilTag JSON file (in WPIlib format)",
			"properties": {
				"format": {
					"const": "wpi",
					"title": "Format"
				},
				"path": {
					"description": "Path to AprilTag configuration",
					"format": "path",
					"title": "Path",
					"type": "string"
				},
				"tagFamily": {
					"allOf": [
						{
							"$ref": "#/$defs/AprilTagFamily"
						}
					],
					"description": "AprilTag family"
				},
				"tagSize": {
					"description": "AprilTag side length, in meters",
					"title": "Tagsize",
					"type": "number"
				}
			},
			"required": [
				"path",
				"tagFamily",
				"tagSize"
			],
			"title": "AprilTagFieldRefWpi",
			"type": "object"
		},
		"AprilTagSai": {
			"properties": {
				"id": {
					"description": "AprilTag id",
					"minimum": 0,
					"title": "Id",
					"type": "integer"
				},
				"size": {
					"description": "Tag size (meters)",
					"minimum": 0.0,
					"title": "Size",
					"type": "number"
				},
				"family": {
					"allOf": [
						{
							"$ref": "#/$defs/AprilTagFamily"
						}
					],
					"description": "Tag family"
				},
				"tagToWorld": {
					"$ref": "#/$defs/Mat44"
				}
			},
			"required": [
				"id",
				"size",
				"family",
				"tagToWorld"
			],
			"title": "AprilTagSai",
			"type": "object"
		},
		"AprilTagStageConfig": {
			"properties": {
				"stage": {
					"const": "apriltag",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"runtime": {
					"default": "host",
					"enum": [
						"device",
						"host"
					],
					"title": "Runtime",
					"type": "string"
				},
				"camera": {
					"default": "left",
					"enum": [
						"left",
						"right",
						"rgb"
					],
					"title": "Camera",
					"type": "string"
				},
				"detectorThreads": {
					"anyOf": [
						{
							"minimum": 0,
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "How many threads should be used for computation",
					"title": "Detector Threads"
				},
				"detectorAsync": {
					"default": false,
					"description": "Should we run the detector on a different thread? Only useful if we're doing multiple things with the same camera",
					"title": "Detector Async",
					"type": "boolean"
				},
				"decodeSharpening": {
					"anyOf": [
						{
							"minimum": 0.0,
							"type": "number"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "How much sharpening should be done to decoded images",
					"title": "Decode Sharpening"
				},
				"quadDecimate": {
					"default": 1,
					"title": "Quaddecimate",
					"type": "integer"
				},
				"quadSigma": {
					"default": 0.0,
					"title": "Quadsigma",
					"type": "number"
				},
				"refineEdges": {
					"default": true,
					"title": "Refine Edges",
					"type": "boolean"
				},
				"hammingDist": {
					"default": 0,
					"description": "Maximum number of bits to correct",
					"exclusiveMaximum": 3,
					"minimum": 0,
					"title": "Hamming Distance",
					"type": "integer"
				},
				"decisionMargin": {
					"default": 35,
					"minimum": 0,
					"title": "Decision Margin",
					"type": "integer"
				},
				"numIterations": {
					"default": 40,
					"title": "Numiterations",
					"type": "integer"
				},
				"undistort": {
					"default": false,
					"description": "Should we try to undistort the camera lens?",
					"title": "Undistort",
					"type": "boolean"
				},
				"solvePNP": {
					"default": true,
					"title": "Solve PnP",
					"type": "boolean"
				},
				"doMultiTarget": {
					"default": false,
					"title": "Do Multi-Target",
					"type": "boolean"
				},
				"doSingleTargetAlways": {
					"default": false,
					"title": "Do Single Target Always",
					"type": "boolean"
				},
				"apriltags": {
					"anyOf": [
						{
							"discriminator": {
								"mapping": {
									"sai": "#/$defs/AprilTagFieldRefSai",
									"wpi": "#/$defs/AprilTagFieldRefWpi"
								},
								"propertyName": "format"
							},
							"oneOf": [
								{
									"$ref": "#/$defs/AprilTagFieldRefWpi"
								},
								{
									"$ref": "#/$defs/AprilTagFieldRefSai"
								}
							]
						},
						{
							"discriminator": {
								"mapping": {
									"sai": "#/$defs/AprilTagFieldInlineSai",
									"wpi": "#/$defs/AprilTagFieldInlineWpi"
								},
								"propertyName": "format"
							},
							"oneOf": [
								{
									"$ref": "#/$defs/AprilTagFieldInlineWpi"
								},
								{
									"$ref": "#/$defs/AprilTagFieldInlineSai"
								}
							]
						},
						{
							"$ref": "#/$defs/AprilTagFieldNamedWpilib"
						}
					],
					"title": "Apriltags"
				}
			},
			"required": [
				"apriltags"
			],
			"title": "AprilTagStageConfig",
			"type": "object"
		},
		"AprilTagStrategy": {
			"description": "How should we handle AprilTag detections?",
			"enum": [
				"lowest_ambiguity",
				"closest_to_last_pose",
				"average_best_targets"
			],
			"title": "AprilTagStrategy",
			"type": "string"
		},
		"AprilTagWpi": {
			"description": "A single AprilTag definition (WPI format)",
			"properties": {
				"ID": {
					"description": "AprilTag id",
					"minimum": 0,
					"title": "Id",
					"type": "integer"
				},
				"pose": {
					"description": "AprilTag pose, in field-space (field->tag)",
					"properties": {
						"translation": {
							"properties": {
								"x": {
									"title": "X",
									"type": "number"
								},
								"y": {
									"title": "Y",
									"type": "number"
								},
								"z": {
									"title": "Z",
									"type": "number"
								}
							},
							"required": [
								"x",
								"y",
								"z"
							],
							"title": "Translation",
							"type": "object"
						},
						"rotation": {
							"properties": {
								"quaternion": {
									"properties": {
										"W": {
											"title": "W",
											"type": "number"
										},
										"X": {
											"title": "X",
											"type": "number"
										},
										"Y": {
											"title": "Y",
											"type": "number"
										},
										"Z": {
											"title": "Z",
											"type": "number"
										}
									},
									"required": [
										"W",
										"X",
										"Y",
										"Z"
									],
									"title": "Quaternion",
									"type": "object"
								}
							},
							"required": [
								"quaternion"
							],
							"title": "Rotation",
							"type": "object"
						}
					},
					"required": [
						"translation",
						"rotation"
					],
					"title": "Pose",
					"type": "object"
				}
			},
			"required": [
				"ID",
				"pose"
			],
			"title": "AprilTagWpi",
			"type": "object"
		},
		"CameraConfig": {
			"properties": {
				"name": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Human-readable name",
					"title": "Name"
				},
				"selector": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/$defs/OakSelector"
						}
					],
					"description": "Which camera are we referencing?",
					"title": "Selector"
				},
				"max_usb": {
					"anyOf": [
						{
							"enum": [
								"FULL",
								"HIGH",
								"LOW",
								"SUPER",
								"SUPER_PLUS",
								"UNKNOWN"
							],
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Max Usb"
				},
				"retry": {
					"$ref": "#/$defs/RetryConfig"
				},
				"pose": {
					"anyOf": [
						{
							"properties": {
								"translation": {
									"properties": {
										"x": {
											"title": "X",
											"type": "number"
										},
										"y": {
											"title": "Y",
											"type": "number"
										},
										"z": {
											"title": "Z",
											"type": "number"
										}
									},
									"required": [
										"x",
										"y",
										"z"
									],
									"title": "Translation",
									"type": "object"
								},
								"rotation": {
									"properties": {
										"quaternion": {
											"properties": {
												"W": {
													"title": "W",
													"type": "number"
												},
												"X": {
													"title": "X",
													"type": "number"
												},
												"Y": {
													"title": "Y",
													"type": "number"
												},
												"Z": {
													"title": "Z",
													"type": "number"
												}
											},
											"required": [
												"W",
												"X",
												"Y",
												"Z"
											],
											"title": "Quaternion",
											"type": "object"
										}
									},
									"required": [
										"quaternion"
									],
									"title": "Rotation",
									"type": "object"
								}
							},
							"required": [
								"translation",
								"rotation"
							],
							"type": "object"
						},
						{
							"type": "null"
						}
					],
					"description": "Camera pose (in robot-space)",
					"title": "Pose"
				},
				"dynamic_pose": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "If this camera can move, this is it's network name",
					"title": "Dynamic Pose"
				},
				"pipeline": {
					"anyOf": [
						{
							"$ref": "#/$defs/PipelineConfig"
						},
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Configure pipeline",
					"title": "Pipeline"
				}
			},
			"required": [
				"selector",
				"pose"
			],
			"title": "CameraConfig",
			"type": "object"
		},
		"CameraSelectorDefinition": {
			"description": "Define a camera selector",
			"properties": {
				"ordinal": {
					"anyOf": [
						{
							"minimum": 1,
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Pick the n-th camera found (unstable, starts at 1)",
					"title": "Ordinal"
				},
				"mxid": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Filter camera by mxid",
					"title": "Mxid"
				},
				"devname": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Filter camera by device name",
					"title": "Devname"
				},
				"platform": {
					"default": null,
					"enum": [
						"X_LINK_ANY_PLATFORM",
						"X_LINK_MYRIAD_2",
						"X_LINK_MYRIAD_X",
						null
					],
					"title": "Platform"
				},
				"protocol": {
					"default": null,
					"enum": [
						"X_LINK_ANY_PROTOCOL",
						"X_LINK_IPC",
						"X_LINK_NMB_OF_PROTOCOLS",
						"X_LINK_PCIE",
						"X_LINK_TCP_IP",
						"X_LINK_USB_CDC",
						"X_LINK_USB_VSC",
						null
					],
					"title": "Protocol"
				},
				"id": {
					"description": "ID to reference this definition by",
					"title": "Id",
					"type": "string"
				},
				"name": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Name"
				},
				"pose": {
					"anyOf": [
						{
							"properties": {
								"translation": {
									"properties": {
										"x": {
											"title": "X",
											"type": "number"
										},
										"y": {
											"title": "Y",
											"type": "number"
										},
										"z": {
											"title": "Z",
											"type": "number"
										}
									},
									"required": [
										"x",
										"y",
										"z"
									],
									"title": "Translation",
									"type": "object"
								},
								"rotation": {
									"properties": {
										"quaternion": {
											"properties": {
												"W": {
													"title": "W",
													"type": "number"
												},
												"X": {
													"title": "X",
													"type": "number"
												},
												"Y": {
													"title": "Y",
													"type": "number"
												},
												"Z": {
													"title": "Z",
													"type": "number"
												}
											},
											"required": [
												"W",
												"X",
												"Y",
												"Z"
											],
											"title": "Quaternion",
											"type": "object"
										}
									},
									"required": [
										"quaternion"
									],
									"title": "Rotation",
									"type": "object"
								}
							},
							"required": [
								"translation",
								"rotation"
							],
							"type": "object"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Robot-to-camera transform",
					"title": "Pose"
				},
				"dynamic_pose": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "If this camera can move, this is it's network name",
					"title": "Dynamic Pose"
				}
			},
			"required": [
				"id"
			],
			"title": "CameraSelectorDefinition",
			"type": "object"
		},
		"ColorCameraProperties_SensorResolution": {
			"enum": [
				"THE_1080_P",
				"THE_1200_P",
				"THE_4_K",
				"THE_5_MP",
				"THE_12_MP",
				"THE_4000X3000",
				"THE_13_MP",
				"THE_5312X6000",
				"THE_48_MP",
				"THE_720_P",
				"THE_800_P",
				"THE_1440X1080",
				"THE_1352X1012",
				"THE_2024X1520"
			],
			"type": "string"
		},
		"ColorCameraStageConfig": {
			"description": "Configure the RGB camera",
			"properties": {
				"stage": {
					"const": "rgb",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"resolution": {
					"anyOf": [
						{
							"$ref": "#/$defs/ColorCameraProperties_SensorResolution"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Camera sensor resolution"
				},
				"fps": {
					"anyOf": [
						{
							"type": "number"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Max FPS",
					"title": "Fps"
				}
			},
			"title": "ColorCameraStageConfig",
			"type": "object"
		},
		"DataLogConfig": {
			"description": "Configuration for datalog",
			"properties": {
				"enabled": {
					"default": true,
					"title": "Enabled",
					"type": "boolean"
				},
				"folder": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Folder"
				},
				"mkdir": {
					"default": false,
					"description": "Make log folder if it doesn't exist?",
					"title": "Mkdir",
					"type": "boolean"
				},
				"cleanup": {
					"default": false,
					"description": "Should we clean up old log files? (see free_space and max_logs)",
					"title": "Cleanup",
					"type": "boolean"
				},
				"free_space": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Minimum free size before we don't make more logs/clean up old ones",
					"title": "Free Space"
				},
				"max_logs": {
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Maximum number of log files to retain (requires cleanup)",
					"title": "Max Logs"
				}
			},
			"title": "DataLogConfig",
			"type": "object"
		},
		"EstimatorConfig": {
			"properties": {
				"detections": {
					"$ref": "#/$defs/ObjectTrackerConfig"
				},
				"pose": {
					"$ref": "#/$defs/PoseEstimatorConfig"
				}
			},
			"title": "EstimatorConfig",
			"type": "object"
		},
		"FieldLayout": {
			"properties": {
				"length": {
					"description": "Field length (meters)",
					"title": "Length",
					"type": "number"
				},
				"width": {
					"description": "Field width (meters)",
					"title": "Width",
					"type": "number"
				}
			},
			"required": [
				"length",
				"width"
			],
			"title": "FieldLayout",
			"type": "object"
		},
		"ImuStageConfig": {
			"properties": {
				"stage": {
					"const": "imu",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				}
			},
			"title": "ImuStageConfig",
			"type": "object"
		},
		"InheritStageConfig": {
			"description": "Include another defined pipeline",
			"properties": {
				"stage": {
					"const": "inherit",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"id": {
					"title": "Id",
					"type": "string"
				}
			},
			"required": [
				"id"
			],
			"title": "InheritStageConfig",
			"type": "object"
		},
		"LogConfig": {
			"description": "Configuration for logging output",
			"properties": {
				"level": {
					"default": "DEBUG",
					"enum": [
						"DEBUG",
						"INFO",
						"WARN",
						"ERROR",
						"FATAL"
					],
					"title": "Level",
					"type": "string"
				},
				"file": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "File"
				},
				"formatters": {
					"additionalProperties": {
						"$ref": "#/$defs/LogFormatterSpec"
					},
					"title": "Formatters",
					"type": "object"
				},
				"handlers": {
					"additionalProperties": {
						"$ref": "#/$defs/LogHandlerSpec"
					},
					"title": "Handlers",
					"type": "object"
				},
				"loggers": {
					"additionalProperties": {
						"$ref": "#/$defs/LoggerSpec"
					},
					"title": "Loggers",
					"type": "object"
				}
			},
			"title": "LogConfig",
			"type": "object"
		},
		"LogFormatterSpec": {
			"properties": {
				"format": {
					"title": "Format",
					"type": "string"
				},
				"datefmt": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Datefmt"
				}
			},
			"required": [
				"format"
			],
			"title": "LogFormatterSpec",
			"type": "object"
		},
		"LogHandlerSpec": {
			"properties": {
				"formatter": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/$defs/LogFormatterSpec"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Formatter"
				}
			},
			"title": "LogHandlerSpec",
			"type": "object"
		},
		"LoggerSpec": {
			"properties": {
				"handlers": {
					"items": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/$defs/LogHandlerSpec"
							}
						]
					},
					"title": "Handlers",
					"type": "array"
				}
			},
			"title": "LoggerSpec",
			"type": "object"
		},
		"Mat44": {
			"maxItems": 4,
			"minItems": 4,
			"prefixItems": [
				{
					"$ref": "#/$defs/Vec4"
				},
				{
					"$ref": "#/$defs/Vec4"
				},
				{
					"$ref": "#/$defs/Vec4"
				},
				{
					"$ref": "#/$defs/Vec4"
				}
			],
			"title": "Mat44",
			"type": "array"
		},
		"MonoCameraProperties_SensorResolution": {
			"enum": [
				"THE_720_P",
				"THE_800_P",
				"THE_400_P",
				"THE_480_P",
				"THE_1200_P"
			],
			"type": "string"
		},
		"MonoCameraStageConfig": {
			"description": "Configure mono camera",
			"properties": {
				"stage": {
					"const": "mono",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"target": {
					"enum": [
						"left",
						"right"
					],
					"title": "Target",
					"type": "string"
				},
				"resolution": {
					"anyOf": [
						{
							"$ref": "#/$defs/MonoCameraProperties_SensorResolution"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Camera sensor resolution"
				},
				"fps": {
					"anyOf": [
						{
							"type": "number"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Max FPS",
					"title": "Fps"
				}
			},
			"required": [
				"target"
			],
			"title": "MonoCameraStageConfig",
			"type": "object"
		},
		"NNConfig": {
			"description": "Base config for NN",
			"properties": {
				"confidence_threshold": {
					"title": "Confidence Threshold",
					"type": "number"
				},
				"iou_threshold": {
					"title": "Iou Threshold",
					"type": "number"
				},
				"labels": {
					"items": {
						"type": "string"
					},
					"title": "Labels",
					"type": "array"
				},
				"depthLowerThreshold": {
					"title": "Depthlowerthreshold",
					"type": "integer"
				},
				"depthUpperThreshold": {
					"title": "Depthupperthreshold",
					"type": "integer"
				},
				"classes": {
					"title": "Classes",
					"type": "integer"
				},
				"coordinateSize": {
					"title": "Coordinatesize",
					"type": "integer"
				},
				"anchors": {
					"items": {
						"type": "number"
					},
					"title": "Anchors",
					"type": "array"
				},
				"anchor_masks": {
					"additionalProperties": {
						"items": {
							"type": "integer"
						},
						"type": "array"
					},
					"title": "Anchor Masks",
					"type": "object"
				}
			},
			"required": [
				"confidence_threshold",
				"iou_threshold",
				"labels",
				"depthLowerThreshold",
				"depthUpperThreshold",
				"classes",
				"coordinateSize",
				"anchors",
				"anchor_masks"
			],
			"title": "NNConfig",
			"type": "object"
		},
		"NavXConfig": {
			"description": "NavX configuration",
			"properties": {
				"port": {
					"default": "usb",
					"description": "NavX connection",
					"enum": [
						"usb",
						"usb1",
						"usb2"
					],
					"title": "Port",
					"type": "string"
				},
				"update_rate": {
					"default": 60,
					"description": "NavX poll rate (in hertz)",
					"exclusiveMinimum": 0,
					"maximum": 255,
					"title": "Update Rate",
					"type": "integer"
				}
			},
			"title": "NavXConfig",
			"type": "object"
		},
		"NetworkTablesConfig": {
			"description": "Configure NetworkTables. Must be provided locally",
			"properties": {
				"enabled": {
					"default": true,
					"description": "Should anything be sent to NetworkTables?",
					"title": "Enabled",
					"type": "boolean"
				},
				"team": {
					"default": 365,
					"description": "FRC team number",
					"title": "Team",
					"type": "integer"
				},
				"port": {
					"default": 5810,
					"description": "Which port should we connect to?",
					"title": "Port",
					"type": "integer"
				},
				"host": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "NetworkTables host IP",
					"title": "Host"
				},
				"client_id": {
					"default": "MOEnet",
					"description": "Client connection name",
					"title": "Client Id",
					"type": "string"
				},
				"table": {
					"default": "moenet",
					"description": "Root table name",
					"title": "Table",
					"type": "string"
				},
				"log_level": {
					"default": "error",
					"description": "Minimum level to send logs",
					"title": "Log Level",
					"type": "string"
				},
				"log_lines": {
					"default": 10,
					"description": "Number of log lines to retain",
					"title": "Log Lines",
					"type": "integer"
				},
				"subscribeSleep": {
					"default": true,
					"description": "Should we listen for sleep control at `/moenet/rio_request_sleep`?",
					"title": "Subscribesleep",
					"type": "boolean"
				},
				"subscribeConfig": {
					"default": true,
					"description": "Should we listen for config updates at `/moenet/rio_dynamic_config`?",
					"title": "Subscribeconfig",
					"type": "boolean"
				},
				"publishLog": {
					"default": true,
					"description": "Should we publish logs to `/moenet/client_log`?",
					"title": "Publishlog",
					"type": "boolean"
				},
				"publishPing": {
					"default": true,
					"description": "Should we publish ping updates to `/moenet/client_ping`?",
					"title": "Publishping",
					"type": "boolean"
				},
				"publishErrors": {
					"default": true,
					"description": "Should we publish errors updates to `/moenet/client_error`?",
					"title": "Publisherrors",
					"type": "boolean"
				},
				"publishStatus": {
					"default": true,
					"title": "Publishstatus",
					"type": "boolean"
				},
				"publishConfig": {
					"default": true,
					"description": "Should we publish this config to `/moenet/client_config`?",
					"title": "Publishconfig",
					"type": "boolean"
				},
				"publishSystemInfo": {
					"default": true,
					"description": "Should we publish system info to `/moenet/client_telemetry`?",
					"title": "Publishsysteminfo",
					"type": "boolean"
				},
				"publishDetections": {
					"default": true,
					"description": "Publish object detections to `/moenet/client_detections`",
					"title": "Publishdetections",
					"type": "boolean"
				},
				"tfFieldToRobot": {
					"allOf": [
						{
							"$ref": "#/$defs/NetworkTablesDirection"
						}
					],
					"default": "pub",
					"description": "field -> robot transform (absolute pose)"
				},
				"tfFieldToOdom": {
					"allOf": [
						{
							"$ref": "#/$defs/NetworkTablesDirection"
						}
					],
					"default": "pub",
					"description": "field -> odom transform (odometry estimate)"
				},
				"tfOodomToRobot": {
					"allOf": [
						{
							"$ref": "#/$defs/NetworkTablesDirection"
						}
					],
					"default": "pub",
					"description": "odom->robot transform (odometry correction)"
				},
				"subscribePoseOverride": {
					"default": true,
					"description": "Allow the Rio to override poses",
					"title": "Subscribeposeoverride",
					"type": "boolean"
				},
				"publishField2dF2O": {
					"default": false,
					"description": "Publish Field2d widget (field->odom)",
					"title": "Publishfield2Df2O",
					"type": "boolean"
				},
				"publishField2dF2R": {
					"default": false,
					"description": "Publish Field2d widget (field->robot)",
					"title": "Publishfield2Df2R",
					"type": "boolean"
				},
				"publishField2dDets": {
					"default": false,
					"description": "Publish Field2d widget (field->notes)",
					"title": "Publishfield2Ddets",
					"type": "boolean"
				}
			},
			"title": "NetworkTablesConfig",
			"type": "object"
		},
		"NetworkTablesDirection": {
			"description": "Which direction to send data?",
			"enum": [
				"sub",
				"pub",
				false
			],
			"title": "NetworkTablesDirection"
		},
		"OakSelector": {
			"properties": {
				"ordinal": {
					"anyOf": [
						{
							"minimum": 1,
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Pick the n-th camera found (unstable, starts at 1)",
					"title": "Ordinal"
				},
				"mxid": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Filter camera by mxid",
					"title": "Mxid"
				},
				"devname": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Filter camera by device name",
					"title": "Devname"
				},
				"platform": {
					"default": null,
					"enum": [
						"X_LINK_ANY_PLATFORM",
						"X_LINK_MYRIAD_2",
						"X_LINK_MYRIAD_X",
						null
					],
					"title": "Platform"
				},
				"protocol": {
					"default": null,
					"enum": [
						"X_LINK_ANY_PROTOCOL",
						"X_LINK_IPC",
						"X_LINK_NMB_OF_PROTOCOLS",
						"X_LINK_PCIE",
						"X_LINK_TCP_IP",
						"X_LINK_USB_CDC",
						"X_LINK_USB_VSC",
						null
					],
					"title": "Protocol"
				}
			},
			"title": "OakSelector",
			"type": "object"
		},
		"ObjectDetectionStageConfig": {
			"properties": {
				"stage": {
					"const": "nn",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"config": {
					"anyOf": [
						{
							"$ref": "#/$defs/NNConfig"
						},
						{
							"format": "path",
							"type": "string"
						}
					],
					"title": "Config"
				},
				"blobPath": {
					"format": "path",
					"title": "Blobpath",
					"type": "string"
				}
			},
			"required": [
				"config",
				"blobPath"
			],
			"title": "ObjectDetectionStageConfig",
			"type": "object"
		},
		"ObjectTrackerConfig": {
			"description": "Configuration for tracking object detections over time",
			"properties": {
				"min_detections": {
					"default": 8,
					"description": "Number of times to have seen an object before accepting it",
					"exclusiveMinimum": 0,
					"title": "Min Detections",
					"type": "integer"
				},
				"detected_duration": {
					"default": "PT1S",
					"description": "Length of time to keep an object detecting (seconds)",
					"format": "duration",
					"title": "Detected Duration",
					"type": "string"
				},
				"history_duration": {
					"default": "PT8S",
					"description": "Length of time to retain an object detection (seconds)",
					"format": "duration",
					"title": "History Duration",
					"type": "string"
				},
				"clustering_distance": {
					"default": 0.3,
					"description": "",
					"exclusiveMinimum": 0.0,
					"title": "Clustering Distance",
					"type": "number"
				},
				"min_depth": {
					"default": 0.5,
					"description": "",
					"exclusiveMinimum": 0.0,
					"title": "Min Depth",
					"type": "number"
				},
				"alpha": {
					"default": 0.2,
					"description": "",
					"exclusiveMinimum": 0.0,
					"title": "Alpha",
					"type": "number"
				}
			},
			"title": "ObjectTrackerConfig",
			"type": "object"
		},
		"PipelineConfig": {
			"items": {
				"discriminator": {
					"mapping": {
						"apriltag": "#/$defs/AprilTagStageConfig",
						"depth": "#/$defs/StereoDepthStageConfig",
						"imu": "#/$defs/ImuStageConfig",
						"inherit": "#/$defs/InheritStageConfig",
						"mono": "#/$defs/MonoCameraStageConfig",
						"nn": "#/$defs/ObjectDetectionStageConfig",
						"rgb": "#/$defs/ColorCameraStageConfig",
						"save": "#/$defs/SaveStageConfig",
						"show": "#/$defs/ShowStageConfig",
						"slam": "#/$defs/SlamStageConfig",
						"web": "#/$defs/WebStreamStageConfig"
					},
					"propertyName": "stage"
				},
				"oneOf": [
					{
						"$ref": "#/$defs/InheritStageConfig"
					},
					{
						"$ref": "#/$defs/ColorCameraStageConfig"
					},
					{
						"$ref": "#/$defs/MonoCameraStageConfig"
					},
					{
						"$ref": "#/$defs/StereoDepthStageConfig"
					},
					{
						"$ref": "#/$defs/ObjectDetectionStageConfig"
					},
					{
						"$ref": "#/$defs/AprilTagStageConfig"
					},
					{
						"$ref": "#/$defs/SlamStageConfig"
					},
					{
						"$ref": "#/$defs/WebStreamStageConfig"
					},
					{
						"$ref": "#/$defs/SaveStageConfig"
					},
					{
						"$ref": "#/$defs/ShowStageConfig"
					},
					{
						"$ref": "#/$defs/ImuStageConfig"
					}
				]
			},
			"title": "PipelineConfig",
			"type": "array"
		},
		"PipelineDefinition": {
			"properties": {
				"id": {
					"title": "Id",
					"type": "string"
				},
				"stages": {
					"$ref": "#/$defs/PipelineConfig"
				}
			},
			"required": [
				"id",
				"stages"
			],
			"title": "PipelineDefinition",
			"type": "object"
		},
		"PoseEstimatorConfig": {
			"properties": {
				"history": {
					"default": "PT3S",
					"description": "Length of pose replay buffer (seconds)",
					"format": "duration",
					"title": "History",
					"type": "string"
				},
				"force2d": {
					"default": true,
					"description": "Should we force the pose to fit on the field?",
					"title": "Force2D",
					"type": "boolean"
				},
				"apriltagStrategy": {
					"anyOf": [
						{
							"$ref": "#/$defs/AprilTagStrategy"
						},
						{
							"type": "null"
						}
					],
					"default": "lowest_ambiguity"
				},
				"odometryStdDevs": {
					"default": [],
					"items": {
						"type": "number"
					},
					"title": "Odometrystddevs",
					"type": "array"
				}
			},
			"title": "PoseEstimatorConfig",
			"type": "object"
		},
		"RetryConfig": {
			"description": "Configure restart/retry logic",
			"properties": {
				"optional": {
					"default": false,
					"description": "Is it an error if this camera is not detected?",
					"title": "Optional",
					"type": "boolean"
				},
				"connection_tries": {
					"default": 1,
					"title": "Connection Tries",
					"type": "integer"
				},
				"connection_delay": {
					"default": "PT1S",
					"format": "duration",
					"title": "Connection Delay",
					"type": "string"
				},
				"restart_tries": {
					"default": 2,
					"title": "Restart Tries",
					"type": "integer"
				}
			},
			"title": "RetryConfig",
			"type": "object"
		},
		"SaveStageConfig": {
			"description": "Save images to file",
			"properties": {
				"stage": {
					"const": "save",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"target": {
					"$ref": "#/$defs/VideoDisplayTarget"
				},
				"path": {
					"format": "path",
					"title": "Path",
					"type": "string"
				},
				"maxFramerate": {
					"anyOf": [
						{
							"exclusiveMinimum": 0.0,
							"type": "number"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Maximum framerate for stream",
					"title": "Maxframerate"
				}
			},
			"required": [
				"target",
				"path"
			],
			"title": "SaveStageConfig",
			"type": "object"
		},
		"ShowStageConfig": {
			"description": "Show video stream as GUI",
			"properties": {
				"stage": {
					"const": "show",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"target": {
					"$ref": "#/$defs/VideoDisplayTarget"
				}
			},
			"required": [
				"target"
			],
			"title": "ShowStageConfig",
			"type": "object"
		},
		"SlamStageConfig": {
			"description": "SAI slam",
			"properties": {
				"stage": {
					"const": "slam",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"slam": {
					"default": true,
					"title": "Slam",
					"type": "boolean"
				},
				"vio": {
					"default": false,
					"description": "Enable VIO",
					"title": "Vio",
					"type": "boolean"
				},
				"map_save": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Map Save"
				},
				"map_load": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Map Load"
				},
				"apriltags": {
					"anyOf": [
						{
							"discriminator": {
								"mapping": {
									"sai": "#/$defs/AprilTagFieldRefSai",
									"wpi": "#/$defs/AprilTagFieldRefWpi"
								},
								"propertyName": "format"
							},
							"oneOf": [
								{
									"$ref": "#/$defs/AprilTagFieldRefWpi"
								},
								{
									"$ref": "#/$defs/AprilTagFieldRefSai"
								}
							]
						},
						{
							"discriminator": {
								"mapping": {
									"sai": "#/$defs/AprilTagFieldInlineSai",
									"wpi": "#/$defs/AprilTagFieldInlineWpi"
								},
								"propertyName": "format"
							},
							"oneOf": [
								{
									"$ref": "#/$defs/AprilTagFieldInlineWpi"
								},
								{
									"$ref": "#/$defs/AprilTagFieldInlineSai"
								}
							]
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"title": "Apriltags"
				}
			},
			"title": "SlamStageConfig",
			"type": "object"
		},
		"StereoDepthStageConfig": {
			"description": "Configure stereo depth",
			"properties": {
				"stage": {
					"const": "depth",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"checkLeftRight": {
					"anyOf": [
						{
							"type": "boolean"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Enable Left-Right check",
					"title": "Checkleftright"
				},
				"extendedDisparity": {
					"anyOf": [
						{
							"type": "boolean"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Enable extended disparity mode",
					"title": "Extendeddisparity"
				},
				"preset": {
					"default": null,
					"description": "Set preset profile",
					"enum": [
						"high_accuracy",
						"high_density",
						null
					],
					"title": "Preset"
				}
			},
			"title": "StereoDepthStageConfig",
			"type": "object"
		},
		"Vec4": {
			"maxItems": 4,
			"minItems": 4,
			"prefixItems": [
				{
					"type": "number"
				},
				{
					"type": "number"
				},
				{
					"type": "number"
				},
				{
					"type": "number"
				}
			],
			"title": "Vec4",
			"type": "array"
		},
		"VideoDisplayTarget": {
			"description": "Name of video stream for user consumption",
			"enum": [
				"left",
				"right",
				"rgb",
				"depth"
			],
			"title": "VideoDisplayTarget",
			"type": "string"
		},
		"WebConfig": {
			"description": "Configure webserver",
			"properties": {
				"enabled": {
					"default": true,
					"description": "Should we enable the webserver?",
					"title": "Enabled",
					"type": "boolean"
				},
				"host": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Host for HTTP server",
					"title": "Host"
				},
				"port": {
					"anyOf": [
						{
							"exclusiveMinimum": 0,
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": 8080,
					"description": "Port for HTTP server",
					"title": "Port"
				},
				"video_codec": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Force a specific video codec (e.g. video/H264)",
					"title": "Video Codec"
				},
				"cert_file": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "SSL certificate file (for HTTPS)",
					"title": "Cert File"
				},
				"key_file": {
					"anyOf": [
						{
							"format": "path",
							"type": "string"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "SSL key file (for HTTPS)",
					"title": "Key File"
				}
			},
			"title": "WebConfig",
			"type": "object"
		},
		"WebStreamStageConfig": {
			"description": "Stream data to web",
			"properties": {
				"stage": {
					"const": "web",
					"description": "Stage name",
					"title": "Stage"
				},
				"enabled": {
					"default": true,
					"description": "Is this stage enabled?",
					"title": "Enabled",
					"type": "boolean"
				},
				"optional": {
					"default": false,
					"description": "If there's an error constructing this stage, is that a pipeline failure?",
					"title": "Optional",
					"type": "boolean"
				},
				"target": {
					"$ref": "#/$defs/VideoDisplayTarget"
				},
				"maxFramerate": {
					"anyOf": [
						{
							"exclusiveMinimum": 0,
							"type": "integer"
						},
						{
							"type": "null"
						}
					],
					"default": null,
					"description": "Maximum framerate for stream",
					"title": "Maxframerate"
				}
			},
			"required": [
				"target"
			],
			"title": "WebStreamStageConfig",
			"type": "object"
		}
	},
	"description": "Local config data",
	"properties": {
		"allow_overwrite": {
			"default": false,
			"description": "Allow remote changes to overwrite this config?",
			"title": "Allow Overwrite",
			"type": "boolean"
		},
		"nt": {
			"allOf": [
				{
					"$ref": "#/$defs/NetworkTablesConfig"
				}
			],
			"description": "NetworkTables data",
			"title": "NetworkTables"
		},
		"timer": {
			"anyOf": [
				{
					"const": "system"
				},
				{
					"$ref": "#/$defs/NavXConfig"
				}
			],
			"default": "system",
			"description": "Timer for synchronizing with RoboRIO",
			"title": "Timer"
		},
		"log": {
			"$ref": "#/$defs/LogConfig"
		},
		"datalog": {
			"$ref": "#/$defs/DataLogConfig"
		},
		"estimator": {
			"$ref": "#/$defs/EstimatorConfig"
		},
		"camera_selectors": {
			"items": {
				"$ref": "#/$defs/CameraSelectorDefinition"
			},
			"title": "Camera Selectors",
			"type": "array"
		},
		"cameras": {
			"default": null,
			"description": "Configuration for individual cameras",
			"items": {
				"$ref": "#/$defs/CameraConfig"
			},
			"title": "Cameras",
			"type": "array"
		},
		"pipelines": {
			"description": "Reusable pipelines",
			"items": {
				"$ref": "#/$defs/PipelineDefinition"
			},
			"title": "Pipelines",
			"type": "array"
		},
		"web": {
			"$ref": "#/$defs/WebConfig"
		}
	},
	"title": "LocalConfig",
	"type": "object"
}